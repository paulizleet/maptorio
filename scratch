def parse(f)

    sub_items = {}
    comma_trail = 0
    lead = 0
    trail = 0
    count = 0
    while lead < f.length do
        if f[lead] == "{"
            trail = lead if count == 0
            comma_trail = lead
            count+=1 
        elsif f[lead] == ","

            comma_str = f[comma_trail+1..lead-1]
            splits = comma_str.split("=")

            #ingredients don't mesh into the normal key = value template of recipes themselves.
            #this is special handling for them.

            if splits.length == 1
                splits = comma_str.split(",")
                if splits.length == 1
                    #if it's still only one item, skip to next iteration.
                    #the next time we wind up in this block it will work
                    lead += 1
                    next
                end
            end

            comma_trail = lead
            p comma_str
            sub_items.merge!({splits[0] => splits[1]})

        elsif[lead] == "{"
            count -= 1
            if count == 0
                sub_items.merge!(parse(f[trail..lead]))
            end
        end
        lead += 1
    end

    return sub_items
end

p Dir.getwd
recipe_files = Dir.entries("factorio/prototypes/recipe")
items = []
recipe_files.each do |pth|

    f = open("./factorio/prototypes/recipe/#{pth}").read
    f.gsub!(/\"/, "")
    f.gsub!(/\s/, "")
    
    f = f[f.index("{")..f.rindex("}")].strip
    p f[0..10]
    p f[1]
    items = parse(f)
    puts items

    break

end
